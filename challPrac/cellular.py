# THREE GOLD STARS
# Question 3-star: Elementary Cellular Automaton

# Please see the video for additional explanation.

# A one-dimensional cellular automata takes in a string, which in our
# case, consists of the characters '.' and 'x', and changes it according
# to some predetermined rules. The rules consider three characters, which
# are a character at position k and its two neighbours, and determine
# what the character at the corresponding position k will be in the new
# string.

# For example, if the character at position k in the string  is '.' and
# its neighbours are '.' and 'x', then the pattern is '..x'. We look up
# '..x' in the table below. In the table, '..x' corresponds to 'x' which
# means that in the new string, 'x' will be at position k.

# Rules:
#          pattern in         position k in        contribution to
# Value    current string     new string           pattern number
#                                                  is 0 if replaced by '.'
#                                                  and value if replaced
#                                                  by 'x'
#   1       '...'               '.'                        1 * 0
#   2       '..x'               'x'                        2 * 1
#   4       '.x.'               'x'                        4 * 1
#   8       '.xx'               'x'                        8 * 1
#  16       'x..'               '.'                       16 * 0
#  32       'x.x'               '.'                       32 * 0
#  64       'xx.'               '.'                       64 * 0
# 128       'xxx'               'x'                      128 * 1
#                                                      ----------
#                                                           142

# To calculate the patterns which will have the central character x, work
# out the values required to sum to the pattern number. For example,
# 32 = 32 so only pattern 32 which is x.x changes the central position to
# an x. All the others have a . in the next line.

# 23 = 16 + 4 + 2 + 1 which means that 'x..', '.x.', '..x' and '...' all
# lead to an 'x' in the next line and the rest have a '.'

# For pattern 142, and starting string
# ...........x...........
# the new strings created will be
# ..........xx...........  (generations = 1)
# .........xx............  (generations = 2)
# ........xx.............  (generations = 3)
# .......xx..............  (generations = 4)
# ......xx...............  (generations = 5)
# .....xx................  (generations = 6)
# ....xx.................  (generations = 7)
# ...xx..................  (generations = 8)
# ..xx...................  (generations = 9)
# .xx....................  (generations = 10)

# Note that the first position of the string is next to the last position
# in the string.

# Define a procedure, cellular_automaton, that takes three inputs:
#     a non-empty string,
#     a pattern number which is an integer between 0 and 255 that
# represents a set of rules, and
#     a positive integer, n, which is the number of generations.
# The procedure should return a string which is the result of
# applying the rules generated by the pattern to the string n times.

def makerule(rules, num):
    print 'making rule'
    print num
    print rules
    if float(num)/rules >= 1:

        num = num - rules
        print 'num to return should reduce'
        print num
        return ('x', num)
    else:
        print 'number staying same'
        return ('.',num)

def generate(oni, rules):
    bleep = ""
    longst = len(oni)
    oner = 0
    while oner < longst:
        if longst == 1:
            doo = oni *3
            bleep = rules[doo]
            return  bleep
        if oner == 0:
            print 'generating firt thing' + oni
            comp = oni[-1] + oni[0] + oni[1]
            print rules[comp]
        elif oner ==longst-1:
            comp = oni[oner -1] + oni[oner] + oni[0]
        else:
            comp = oni[oner-1] + oni[oner] + oni[oner +1]
        bleep = bleep + rules[comp]

        oner = oner + 1
    print 'generation done: ' + bleep
    return bleep

def cellular_automaton(des, pat, gen):
    print des
    rules = {
    'xxx': 'x',
    'xx.':'x'
    }
    strlen = len(des)
    if pat/float(128) > 1:
        pat = pat - 128
    else:
        rules['xxx'] = '.'
    if pat/float(64) > 1:
        pat = pat - 64
    else:
        rules["xx."] = '.'
    print "printing gen"
    (rules["x.x"], pat) = makerule(32, pat)
    print gen
    (rules["x.."], pat) = makerule(16,pat)
    print 'next 8'
    (rules[".xx"], pat) = makerule(8, pat)
    (rules[".x."], pat) = makerule(4,pat)
    (rules["..x"], pat) = makerule(2,pat)
    (rules["..."], pat) = makerule(1,pat)


    print pat
    print rules
    dist  = des
    for i in range(gen):
        dist = generate(dist, rules)
    return dist





print cellular_automaton('.x.x.x.x.', 17, 2)
#>>> xxxxxxx..
print cellular_automaton('.x.x.x.x.', 249, 3)
#>>> .x..x.x.x
print cellular_automaton('...x....', 125, 1)
#>>> xx.xxxxx
print cellular_automaton('...x....', 125, 2)
#>>> .xxx....
print cellular_automaton('...x....', 125, 3)
#>>> .x.xxxxx
print cellular_automaton('...x....', 125, 4)
#>>> xxxx...x
print cellular_automaton('...x....', 125, 5)
#>>> ...xxx.x
#print cellular_automaton('...x....', 125, 6)
#>>> xx.x.xxx
#print cellular_automaton('...x....', 125, 7)
#>>> .xxxxx..
#print cellular_automaton('...x....', 125, 8)
#>>> .x...xxx
#print cellular_automaton('...x....', 125, 9)
#>>> xxxx.x.x
print cellular_automaton('...x....', 125, 10)


#>>> ...xxxxx

print cellular_automaton('.', 21, 1)
